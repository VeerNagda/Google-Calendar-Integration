{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/forms\";\nexport class CalendarComponent {\n  constructor(http, fb) {\n    this.http = http;\n    this.fb = fb;\n  }\n  ngOnInit() {\n    this.eventForm = this.fb.group({\n      title: ['', Validators.required],\n      description: [''],\n      start: ['', Validators.required],\n      end: ['', Validators.required],\n      location: [''],\n      timezone: Intl.DateTimeFormat().resolvedOptions().timeZone\n    });\n  }\n  onSubmit() {\n    const startDate = new Date(this.eventForm.get('start')?.value);\n    const endDate = new Date(this.eventForm.get('end')?.value);\n    const dateFormat = {\n      year: 'numeric',\n      month: '2-digit',\n      day: '2-digit',\n      hour: '2-digit',\n      minute: '2-digit',\n      second: '2-digit'\n    };\n    const startDateTimeString = startDate.toLocaleString('en-US', dateFormat);\n    const endDateTimeString = endDate.toLocaleString('en-US', dateFormat);\n    // Update form values with formatted dates\n    this.eventForm.patchValue({\n      start: startDateTimeString,\n      end: endDateTimeString\n    });\n    this.http.post('https://localhost:44416/api/calendarevent/eventcreate', this.eventForm.value).subscribe(result => {\n      console.log(result);\n    });\n  }\n}\nCalendarComponent.ɵfac = function CalendarComponent_Factory(t) {\n  return new (t || CalendarComponent)(i0.ɵɵdirectiveInject(i1.HttpClient), i0.ɵɵdirectiveInject(i2.FormBuilder));\n};\nCalendarComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: CalendarComponent,\n  selectors: [[\"app-calendar\"]],\n  decls: 23,\n  vars: 1,\n  consts: [[3, \"formGroup\", \"ngSubmit\"], [1, \"form-group\"], [\"for\", \"eventTitle\"], [\"type\", \"text\", \"id\", \"eventTitle\", \"formControlName\", \"title\", 1, \"form-control\"], [\"for\", \"eventDescription\"], [\"id\", \"eventDescription\", \"formControlName\", \"description\", 1, \"form-control\"], [\"for\", \"eventStart\"], [\"type\", \"datetime-local\", \"id\", \"eventStart\", \"formControlName\", \"start\", 1, \"form-control\"], [\"for\", \"eventEnd\"], [\"type\", \"datetime-local\", \"id\", \"eventEnd\", \"formControlName\", \"end\", 1, \"form-control\"], [\"for\", \"eventLocation\"], [\"type\", \"text\", \"id\", \"eventLocation\", \"formControlName\", \"location\", 1, \"form-control\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\"]],\n  template: function CalendarComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"form\", 0);\n      i0.ɵɵlistener(\"ngSubmit\", function CalendarComponent_Template_form_ngSubmit_0_listener() {\n        return ctx.onSubmit();\n      });\n      i0.ɵɵelementStart(1, \"div\", 1)(2, \"label\", 2);\n      i0.ɵɵtext(3, \"Title:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(4, \"input\", 3);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(5, \"div\", 1)(6, \"label\", 4);\n      i0.ɵɵtext(7, \"Description:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(8, \"textarea\", 5);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(9, \"div\", 1)(10, \"label\", 6);\n      i0.ɵɵtext(11, \"Start Time:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(12, \"input\", 7);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(13, \"div\", 1)(14, \"label\", 8);\n      i0.ɵɵtext(15, \"End Time:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(16, \"input\", 9);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(17, \"div\", 1)(18, \"label\", 10);\n      i0.ɵɵtext(19, \"Location:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(20, \"input\", 11);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(21, \"button\", 12);\n      i0.ɵɵtext(22, \"Create Event\");\n      i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"formGroup\", ctx.eventForm);\n    }\n  },\n  dependencies: [i2.ɵNgNoValidate, i2.DefaultValueAccessor, i2.NgControlStatus, i2.NgControlStatusGroup, i2.FormGroupDirective, i2.FormControlName],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"AACA,SAAiCA,UAAU,QAAQ,gBAAgB;;;;AAQnE,OAAM,MAAOC,iBAAiB;EAG5BC,YAAoBC,IAAgB,EAAUC,EAAe;IAAzC,SAAI,GAAJD,IAAI;IAAsB,OAAE,GAAFC,EAAE;EAChD;EAEAC,QAAQ;IACN,IAAI,CAACC,SAAS,GAAG,IAAI,CAACF,EAAE,CAACG,KAAK,CAAC;MAC7BC,KAAK,EAAE,CAAC,EAAE,EAAER,UAAU,CAACS,QAAQ,CAAC;MAChCC,WAAW,EAAE,CAAC,EAAE,CAAC;MACjBC,KAAK,EAAE,CAAC,EAAE,EAAEX,UAAU,CAACS,QAAQ,CAAC;MAChCG,GAAG,EAAE,CAAC,EAAE,EAAEZ,UAAU,CAACS,QAAQ,CAAC;MAC9BI,QAAQ,EAAE,CAAC,EAAE,CAAC;MACdC,QAAQ,EAAEC,IAAI,CAACC,cAAc,EAAE,CAACC,eAAe,EAAE,CAACC;KACnD,CAAC;EACJ;EAEAC,QAAQ;IACN,MAAMC,SAAS,GAAG,IAAIC,IAAI,CAAC,IAAI,CAACf,SAAS,CAACgB,GAAG,CAAC,OAAO,CAAC,EAAEC,KAAK,CAAC;IAC9D,MAAMC,OAAO,GAAG,IAAIH,IAAI,CAAC,IAAI,CAACf,SAAS,CAACgB,GAAG,CAAC,KAAK,CAAC,EAAEC,KAAK,CAAC;IAC1D,MAAME,UAAU,GAAG;MAAEC,IAAI,EAAE,SAAS;MAAEC,KAAK,EAAE,SAAS;MAAEC,GAAG,EAAE,SAAS;MAAEC,IAAI,EAAE,SAAS;MAAEC,MAAM,EAAE,SAAS;MAAEC,MAAM,EAAE;IAAS,CAAE;IAC/H,MAAMC,mBAAmB,GAAGZ,SAAS,CAACa,cAAc,CAAC,OAAO,EAAER,UAAU,CAAC;IACzE,MAAMS,iBAAiB,GAAGV,OAAO,CAACS,cAAc,CAAC,OAAO,EAAER,UAAU,CAAC;IAErE;IACA,IAAI,CAACnB,SAAS,CAAC6B,UAAU,CAAC;MACxBxB,KAAK,EAAEqB,mBAAmB;MAC1BpB,GAAG,EAAEsB;KACN,CAAC;IAEF,IAAI,CAAC/B,IAAI,CAACiC,IAAI,CAAC,uDAAuD,EAAE,IAAI,CAAC9B,SAAS,CAACiB,KAAK,CAAC,CAACc,SAAS,CAACC,MAAM,IAAG;MAC/GC,OAAO,CAACC,GAAG,CAACF,MAAM,CAAC;IACrB,CAAC,CAAC;EACJ;;AAjCWrC,iBAAiB;mBAAjBA,iBAAiB;AAAA;AAAjBA,iBAAiB;QAAjBA,iBAAiB;EAAAwC;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCT9BC,+BAAsD;MAAxBA;QAAA,OAAYC,cAAU;MAAA,EAAC;MACnDD,8BAAwB;MACEA,sBAAM;MAAAA,iBAAQ;MACtCA,2BAAgF;MAClFA,iBAAM;MACNA,8BAAwB;MACQA,4BAAY;MAAAA,iBAAQ;MAClDA,8BAA8F;MAChGA,iBAAM;MACNA,8BAAwB;MACEA,4BAAW;MAAAA,iBAAQ;MAC3CA,4BAA0F;MAC5FA,iBAAM;MACNA,+BAAwB;MACAA,0BAAS;MAAAA,iBAAQ;MACvCA,4BAAsF;MACxFA,iBAAM;MACNA,+BAAwB;MACKA,0BAAS;MAAAA,iBAAQ;MAC5CA,6BAAsF;MACxFA,iBAAM;MACNA,mCAA8C;MAAAA,6BAAY;MAAAA,iBAAS;;;MArB/DA,yCAAuB","names":["Validators","CalendarComponent","constructor","http","fb","ngOnInit","eventForm","group","title","required","description","start","end","location","timezone","Intl","DateTimeFormat","resolvedOptions","timeZone","onSubmit","startDate","Date","get","value","endDate","dateFormat","year","month","day","hour","minute","second","startDateTimeString","toLocaleString","endDateTimeString","patchValue","post","subscribe","result","console","log","selectors","decls","vars","consts","template","i0","ctx"],"sourceRoot":"","sources":["D:\\ASP\\Google Calender Integration\\Google Calender Integration\\ClientApp\\src\\app\\calendar\\calendar.component.ts","D:\\ASP\\Google Calender Integration\\Google Calender Integration\\ClientApp\\src\\app\\calendar\\calendar.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {HttpClient} from \"@angular/common/http\";\n\n@Component({\n  selector: 'app-calendar',\n  templateUrl: './calendar.component.html',\n  styleUrls: ['./calendar.component.css']\n})\nexport class CalendarComponent implements OnInit {\n\n  eventForm!: FormGroup;\n  constructor(private http: HttpClient, private fb: FormBuilder) {\n  }\n\n  ngOnInit(): void {\n    this.eventForm = this.fb.group({\n      title: ['', Validators.required],\n      description: [''],\n      start: ['', Validators.required],\n      end: ['', Validators.required],\n      location: [''],\n      timezone: Intl.DateTimeFormat().resolvedOptions().timeZone,\n    });\n  }\n\n  onSubmit(): void {\n    const startDate = new Date(this.eventForm.get('start')?.value);\n    const endDate = new Date(this.eventForm.get('end')?.value);\n    const dateFormat = { year: 'numeric', month: '2-digit', day: '2-digit', hour: '2-digit', minute: '2-digit', second: '2-digit' };\n    const startDateTimeString = startDate.toLocaleString('en-US', dateFormat);\n    const endDateTimeString = endDate.toLocaleString('en-US', dateFormat);\n\n    // Update form values with formatted dates\n    this.eventForm.patchValue({\n      start: startDateTimeString,\n      end: endDateTimeString,\n    });\n\n    this.http.post('https://localhost:44416/api/calendarevent/eventcreate', this.eventForm.value).subscribe(result => {\n      console.log(result);\n    });\n  }\n\n}\n","<form [formGroup]=\"eventForm\" (ngSubmit)=\"onSubmit()\">\n  <div class=\"form-group\">\n    <label for=\"eventTitle\">Title:</label>\n    <input type=\"text\" class=\"form-control\" id=\"eventTitle\" formControlName=\"title\">\n  </div>\n  <div class=\"form-group\">\n    <label for=\"eventDescription\">Description:</label>\n    <textarea class=\"form-control\" id=\"eventDescription\" formControlName=\"description\"></textarea>\n  </div>\n  <div class=\"form-group\">\n    <label for=\"eventStart\">Start Time:</label>\n    <input type=\"datetime-local\" class=\"form-control\" id=\"eventStart\" formControlName=\"start\">\n  </div>\n  <div class=\"form-group\">\n    <label for=\"eventEnd\">End Time:</label>\n    <input type=\"datetime-local\" class=\"form-control\" id=\"eventEnd\" formControlName=\"end\">\n  </div>\n  <div class=\"form-group\">\n    <label for=\"eventLocation\">Location:</label>\n    <input type=\"text\" class=\"form-control\" id=\"eventLocation\" formControlName=\"location\">\n  </div>\n  <button type=\"submit\" class=\"btn btn-primary\">Create Event</button>\n</form>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}