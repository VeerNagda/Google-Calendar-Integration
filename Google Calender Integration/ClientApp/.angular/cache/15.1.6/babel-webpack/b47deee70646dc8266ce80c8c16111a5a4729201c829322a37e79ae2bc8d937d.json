{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"@angular/common\";\nexport class CalendarComponent {\n  constructor(http, fb, datePipe) {\n    this.http = http;\n    this.fb = fb;\n    this.datePipe = datePipe;\n  }\n  ngOnInit() {\n    this.eventForm = this.fb.group({\n      title: ['', Validators.required],\n      description: [''],\n      start: ['', Validators.required],\n      end: ['', Validators.required],\n      location: [''],\n      timezone: Intl.DateTimeFormat().resolvedOptions().timeZone\n    });\n  }\n  onSubmit() {\n    const eventData = {\n      ...this.eventForm.value\n    };\n    const startDate = eventData.start;\n    const endDate = eventData.end;\n    eventData.start = this.datePipe.transform(startDate, 'dd-MM-yyyy HH:mm:ss');\n    eventData.end = this.datePipe.transform(endDate, 'dd-MM-yyyy HH:mm:ss');\n    console.log(this.eventForm.value);\n    this.http.get(\"https://localhost:44416/api/calendarevent/hasaccesstoken\").subscribe(result => {\n      if (result) {\n        this.http.post('https://localhost:44416/api/calendarevent/eventcreate', this.eventForm.value).subscribe(result => {\n          console.log(result);\n        });\n      } else {\n        this.http.get('https://localhost:44416/api/login', this.eventForm.value).subscribe(result => {\n          console.log(result);\n        });\n      }\n    });\n  }\n}\nCalendarComponent.ɵfac = function CalendarComponent_Factory(t) {\n  return new (t || CalendarComponent)(i0.ɵɵdirectiveInject(i1.HttpClient), i0.ɵɵdirectiveInject(i2.FormBuilder), i0.ɵɵdirectiveInject(i3.DatePipe));\n};\nCalendarComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: CalendarComponent,\n  selectors: [[\"app-calendar\"]],\n  decls: 4,\n  vars: 0,\n  consts: [[\"method\", \"post\"]],\n  template: function CalendarComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"form\", 0)(1, \"label\");\n      i0.ɵɵtext(2, \"Name\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(3, \"input\");\n      i0.ɵɵelementEnd();\n    }\n  },\n  dependencies: [i2.ɵNgNoValidate, i2.NgControlStatusGroup, i2.NgForm],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"AACA,SAAiCA,UAAU,QAAQ,gBAAgB;;;;;AASnE,OAAM,MAAOC,iBAAiB;EAG5BC,YAAoBC,IAAgB,EAAUC,EAAe,EAASC,QAAkB;IAApE,SAAI,GAAJF,IAAI;IAAsB,OAAE,GAAFC,EAAE;IAAsB,aAAQ,GAARC,QAAQ;EAC9E;EAEAC,QAAQ;IACN,IAAI,CAACC,SAAS,GAAG,IAAI,CAACH,EAAE,CAACI,KAAK,CAAC;MAC7BC,KAAK,EAAE,CAAC,EAAE,EAAET,UAAU,CAACU,QAAQ,CAAC;MAChCC,WAAW,EAAE,CAAC,EAAE,CAAC;MACjBC,KAAK,EAAE,CAAC,EAAE,EAAEZ,UAAU,CAACU,QAAQ,CAAC;MAChCG,GAAG,EAAE,CAAC,EAAE,EAAEb,UAAU,CAACU,QAAQ,CAAC;MAC9BI,QAAQ,EAAE,CAAC,EAAE,CAAC;MACdC,QAAQ,EAAEC,IAAI,CAACC,cAAc,EAAE,CAACC,eAAe,EAAE,CAACC;KACnD,CAAC;EACJ;EAEAC,QAAQ;IACN,MAAMC,SAAS,GAAG;MAAC,GAAG,IAAI,CAACd,SAAS,CAACe;IAAK,CAAC;IAC3C,MAAMC,SAAS,GAAGF,SAAS,CAACT,KAAK;IACjC,MAAMY,OAAO,GAAGH,SAAS,CAACR,GAAG;IAC7BQ,SAAS,CAACT,KAAK,GAAG,IAAI,CAACP,QAAQ,CAACoB,SAAS,CAACF,SAAS,EAAE,qBAAqB,CAAE;IAC5EF,SAAS,CAACR,GAAG,GAAG,IAAI,CAACR,QAAQ,CAACoB,SAAS,CAACD,OAAO,EAAE,qBAAqB,CAAE;IACxEE,OAAO,CAACC,GAAG,CAAC,IAAI,CAACpB,SAAS,CAACe,KAAK,CAAC;IACjC,IAAI,CAACnB,IAAI,CAACyB,GAAG,CAAC,0DAA0D,CAAC,CAACC,SAAS,CAACC,MAAM,IAAG;MAC3F,IAAIA,MAAM,EAAC;QACT,IAAI,CAAC3B,IAAI,CAAC4B,IAAI,CAAC,uDAAuD,EAAE,IAAI,CAACxB,SAAS,CAACe,KAAK,CAAC,CAACO,SAAS,CAACC,MAAM,IAAG;UAC/GJ,OAAO,CAACC,GAAG,CAACG,MAAM,CAAC;QACrB,CAAC,CAAC;OACH,MAAM;QACL,IAAI,CAAC3B,IAAI,CAACyB,GAAG,CAAC,mCAAmC,EAAE,IAAI,CAACrB,SAAS,CAACe,KAAK,CAAC,CAACO,SAAS,CAACC,MAAM,IAAG;UAC1FJ,OAAO,CAACC,GAAG,CAACG,MAAM,CAAC;QACrB,CAAC,CAAC;;IAEN,CAAC,CAAC;EAGJ;;AArCW7B,iBAAiB;mBAAjBA,iBAAiB;AAAA;AAAjBA,iBAAiB;QAAjBA,iBAAiB;EAAA+B;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCV9BC,+BAAoB;MACXA,oBAAI;MAAAA,iBAAQ;MACnBA,wBAAO;MACTA,iBAAO","names":["Validators","CalendarComponent","constructor","http","fb","datePipe","ngOnInit","eventForm","group","title","required","description","start","end","location","timezone","Intl","DateTimeFormat","resolvedOptions","timeZone","onSubmit","eventData","value","startDate","endDate","transform","console","log","get","subscribe","result","post","selectors","decls","vars","consts","template","i0"],"sourceRoot":"","sources":["D:\\ASP\\Google Calender Integration\\Google Calender Integration\\ClientApp\\src\\app\\calendar\\calendar.component.ts","D:\\ASP\\Google Calender Integration\\Google Calender Integration\\ClientApp\\src\\app\\calendar\\calendar.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {HttpClient} from \"@angular/common/http\";\nimport {DatePipe} from \"@angular/common\";\n\n@Component({\n  selector: 'app-calendar',\n  templateUrl: './calendar.component.html',\n  styleUrls: ['./calendar.component.css']\n})\nexport class CalendarComponent implements OnInit {\n\n  eventForm!: FormGroup;\n  constructor(private http: HttpClient, private fb: FormBuilder,private datePipe: DatePipe) {\n  }\n\n  ngOnInit(): void {\n    this.eventForm = this.fb.group({\n      title: ['', Validators.required],\n      description: [''],\n      start: ['', Validators.required],\n      end: ['', Validators.required],\n      location: [''],\n      timezone: Intl.DateTimeFormat().resolvedOptions().timeZone,\n    });\n  }\n\n  onSubmit(): void {\n    const eventData = {...this.eventForm.value};\n    const startDate = eventData.start;\n    const endDate = eventData.end;\n    eventData.start = this.datePipe.transform(startDate, 'dd-MM-yyyy HH:mm:ss')!;\n    eventData.end = this.datePipe.transform(endDate, 'dd-MM-yyyy HH:mm:ss')!;\n    console.log(this.eventForm.value)\n    this.http.get(\"https://localhost:44416/api/calendarevent/hasaccesstoken\").subscribe(result => {\n      if (result){\n        this.http.post('https://localhost:44416/api/calendarevent/eventcreate', this.eventForm.value).subscribe(result => {\n          console.log(result);\n        });\n      } else {\n        this.http.get('https://localhost:44416/api/login', this.eventForm.value).subscribe(result => {\n          console.log(result);\n        });\n      }\n    })\n\n\n  }\n\n}\n","<form method=\"post\">\r\n  <label>Name</label>\r\n  <input>\r\n</form>\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}